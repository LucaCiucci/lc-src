
// https://www.sitepoint.com/delay-sleep-pause-wait/
export function sleep(milliseconds : number) {
    const date = Date.now();
    let currentDate = null;
    do {
      currentDate = Date.now();
    } while (currentDate - date < milliseconds);
}

// load an element content from the url specified in the lc-src attribute,
// and replace the element with the loaded content. Return a future that will be resolved when the load is complete.
export function loadSrcElement(element : Element) : Promise<void> {
    // generated by copilot:
    /*let src = element.getAttribute("lc-src");
    if (src) {
        let url = new URL(src, document.baseURI);
        let promise = fetch(url.href).then(response => response.text());
        element.outerHTML = `<div class="lc-loading">Loading...</div>`;
        return promise.then(html => {
            let div = document.createElement("div");
            div.innerHTML = html;
            let newElement = div.firstElementChild;
            if (newElement) {
                element.parentElement.replaceChild(newElement, element);
            }
        });
    }
    return Promise.resolve();*/

    // but it does not work, so we use the following code instead:

    let src = element.getAttribute("lc-src");
    if (src) {
        let url = new URL(src, document.baseURI);
        let promise = fetch(url.href).then(response => response.text());
        element.innerHTML = `Loading...`;
        return promise.then(html => {
            element.innerHTML = html;
        });
    }
    return Promise.resolve();
}

// generated by copilot
export function loadAllSrcElements() : Promise<void> {
    let elements = document.querySelectorAll("[lc-src]");
    let promises = Array.from(elements).map(element => loadSrcElement(element));
    return Promise.all(promises).then(() => {});
}


